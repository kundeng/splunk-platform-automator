version: '3'

vars:
  TERRAFORM_DIR: terraform
  ANSIBLE_DIR: ansible
  CONFIG_DIR: config
  EXAMPLES_DIR: examples
  DEFAULT_ENV: dev
  DEFAULT_PROVIDER: orbstack

tasks:
  init:
    desc: Initialize development environment
    cmds:
      - python3 -m venv .venv
      - source .venv/bin/activate && pip install -r requirements.txt
      - terraform -chdir={{.TERRAFORM_DIR}}/environments/{{.DEFAULT_ENV}} init

  validate:config:
    desc: Validate splunk_config.yml file
    cmds:
      - source .venv/bin/activate && python -m ansible.plugins.inventory.splunk-platform-automator --validate {{.CLI_ARGS | default "config/splunk_config.yml"}}

  generate:inventory:
    desc: Generate Ansible inventory from configuration
    cmds:
      - source .venv/bin/activate && python -m ansible.plugins.inventory.splunk-platform-automator --list {{.CLI_ARGS | default "config/splunk_config.yml"}}

  plan:
    desc: Plan infrastructure changes
    deps: [validate:config]
    dir: '{{.TERRAFORM_DIR}}/environments/{{.CLI_ARGS | default .DEFAULT_ENV}}'
    cmds:
      - terraform plan -out=tfplan

  apply:
    desc: Apply infrastructure changes
    deps: [validate:config]
    dir: '{{.TERRAFORM_DIR}}/environments/{{.CLI_ARGS | default .DEFAULT_ENV}}'
    cmds:
      - terraform apply tfplan

  destroy:
    desc: Destroy infrastructure
    dir: '{{.TERRAFORM_DIR}}/environments/{{.CLI_ARGS | default .DEFAULT_ENV}}'
    cmds:
      - terraform destroy

  ansible:ping:
    desc: Test Ansible connectivity to all hosts
    deps: [generate:inventory]
    cmds:
      - source .venv/bin/activate && ansible all -m ping -i inventory_output.yml

  ansible:deploy:
    desc: Deploy Splunk configuration using Ansible
    deps: [generate:inventory]
    cmds:
      - source .venv/bin/activate && ansible-playbook -i inventory_output.yml playbooks/deploy.yml

  test:
    desc: Run tests
    cmds:
      - source .venv/bin/activate && python -m pytest tests/

  lint:
    desc: Run linters
    cmds:
      - source .venv/bin/activate && flake8 ansible/
      - source .venv/bin/activate && pylint ansible/
      - terraform fmt -check -recursive {{.TERRAFORM_DIR}}

  format:
    desc: Format code
    cmds:
      - source .venv/bin/activate && black ansible/
      - terraform fmt -recursive {{.TERRAFORM_DIR}}

  example:deploy:
    desc: Deploy an example configuration
    cmds:
      - task: validate:config
        vars: {CLI_ARGS: "{{.EXAMPLES_DIR}}/{{.CLI_ARGS}}"}
      - task: generate:inventory
        vars: {CLI_ARGS: "{{.EXAMPLES_DIR}}/{{.CLI_ARGS}}"}
      - task: plan
      - task: apply
      - task: ansible:deploy

  clean:
    desc: Clean up generated files
    cmds:
      - rm -f inventory_output.yml
      - rm -rf .terraform
      - rm -f terraform.tfstate*
      - rm -f tfplan

  default:
    desc: Show available tasks
    cmds:
      - task --list